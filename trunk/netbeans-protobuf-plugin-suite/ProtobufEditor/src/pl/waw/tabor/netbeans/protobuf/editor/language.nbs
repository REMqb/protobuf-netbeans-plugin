TOKEN:keyword:("message"|"extend"|"service"|"rpc"|"enum"|"returns"|"option"|"default"|"extensions"|"group")
TOKEN:label:("required" | "optional" | "repeated")
TOKEN:core_type:("double" | "float" | "int32" | "int64" | "uint32" | "uint64"
       | "sint32" | "sint64" | "fixed32" | "fixed64" | "sfixed32" | "sfixed64"
       | "bool" | "string" | "bytes")
TOKEN:boolLit:('true'|'false')

TOKEN:camelIdent:(['A'-'Z']['A'-'Z' 'a'-'z' '0'-'9' '_']*)

TOKEN:ident:(['A'-'Z' 'a'-'z' '_']['A'-'Z' 'a'-'z' '0'-'9' '_']*)

# according to parser.cc, group names must start with a capital letter as a
# hack for backwards-compatibility
TOKEN:decInt:('-'?['1'-'9']['0'-'9']*)
TOKEN:hexInt:('-'?'0'['x' 'X'](['A'-'F' 'a'-'f' '0'-'9'])+)
TOKEN:octInt:('-'?'0'['0'-'7']+)

# allow_f_after_float_ is disabled by default in tokenizer.cc
TOKEN:floatLit:(['0'-'9']+('.'['0'-'9']+)?(['E' 'e']['+' '-']?['0'-'9']+)?)

TOKEN:quote1:( '\'' ):<STRING_Q1>
TOKEN:quote2:( '\"' ):<STRING_Q2>

TOKEN:line_comment:('//' [^"\n"]* "\n")
TOKEN:start_ncomment:('/*'):<NCOMMENT>

<NCOMMENT>{
    TOKEN:end_ncomment:('*/'):<DEFAULT>
    TOKEN:comment_char:( ([^'*']*['/']?)* )
}


<STRING_Q1>{
    TOKEN:hexEscape:('\\'['X' 'x']['A'-'F' 'a'-'f' '0'-'9']['A'-'F' 'a'-'f' '0'-'9']?)
    TOKEN:octEscape:('\\''0'?['0'-'7'](['0'-'7']['0'-'7'])?)
    TOKEN:charEscape:('\\'['a' 'b' 'f' 'n' 'r' 't' 'v' '\\' '?' '\'' '"'])

    TOKEN:end_quote:('\''):<DEFAULT>
    TOKEN:normal_char:(.)
}

<STRING_Q2>{
    TOKEN:hexEscape:('\\'['X' 'x']['A'-'F' 'a'-'f' '0'-'9']['A'-'F' 'a'-'f' '0'-'9']?)
    TOKEN:octEscape:('\\''0'?['0'-'7'](['0'-'7']['0'-'7'])?)
    TOKEN:charEscape:('\\'['a' 'b' 'f' 'n' 'r' 't' 'v' '\\' '?' '\'' '"'])

    TOKEN:end_quote:('\"'):<DEFAULT>
    TOKEN:normal_char:(.)
}

TOKEN:whitespace:( [" " "\t" "\n" "\r"] )

TOKEN:dot:(".")
TOKEN:semicolon:(";")
TOKEN:equal:("=")
TOKEN:open_block:("{")
TOKEN:close_block:("}")
TOKEN:open_brace:("[")
TOKEN:close_brace:("]")
TOKEN:open_parant:("(")
TOKEN:close_parant:(")")

SKIP:whitespace
SKIP:line_comment
SKIP:start_ncomment
SKIP:end_ncomment
SKIP:comment_char

S = Proto;


# contents must not contain unescaped quote character
# check different types of quote

StrLit = (<quote1>|<quote2>) ( <hexEscape> | <octEscape> | <charEscape> | <normal_char> )* <end_quote> ;
IntLit= <decInt> | <hexInt> | <octInt>;

#Proto = ( Message | Extend | Enum | Import | Package | Option | Service ";" )*;
Proto = (  Message | Extend | Enum | Import | Package | Option | Service | ";" )*;

AnyIdent= (<ident> | <camelIdent>);

#GlobalOptionConstant = "SPEED";
MessageName = AnyIdent;
Import = "import" StrLit ";" ;
Package = "package"  DotIdent ";";
DotIdent= AnyIdent ( "." AnyIdent )*;
Option = "option" OptionBody ";";
OptionBody =  DotIdent "=" Constant;
Message = "message" MessageName MessageBody;
Extend = "extend" UserType "{" ( GroupOrField | ";" )* "}";
Enum = "enum" EnumName EnumBody;
EnumName = AnyIdent;
EnumBody = "{" ( Option | EnumField | ";" )* "}";
EnumField = AnyIdent "=" IntLit ";";
Service = "service" AnyIdent ServiceBody;
ServiceBody = "{" ( Option | Rpc | ";" )* "}";
Rpc = "rpc" AnyIdent "(" ParamUserType ")" "returns" "(" ResUserType ")" ";";
ParamUserType=UserType;
ResUserType=UserType;
MessageBody = "{" ( Enum | Message | Extend | Extensions | GroupOrField | Option | ";" )* "}";
GroupOrField = <label> (GroupCont | FieldCont);
GroupCont = "group" <camelIdent> "=" IntLit MessageBody;
FieldCont = Type AnyIdent "=" IntLit [ "[" FieldOption ( "," FieldOption )* "]" ] ";";
# tag number must be 2^29-1 or lower, not 0, and not 19000-19999 (reserved)
FieldOption = OptionBody | "default" "=" Constant;
# extension numbers must not overlap with field or other extension numbers
Extensions = "extensions" Extension ( "," Extension )* ";";

Extension = FromIntLit [ "to" ( ToIntLit | "max" ) ] ;
FromIntLit=IntLit;
ToIntLit=IntLit;

# leading dot for identifiers means they're fully qualified
UserType = ["."] AnyIdent ( "." AnyIdent )*;
Type = <core_type> | UserType ;
Constant = AnyIdent | IntLit | <floatLit> | StrLit | <boolLit>;

COLOR:ident,camelIdent: {
    foreground_color:"orange";
    font_type:"bold";
}


COLOR:comment,line_comment,start_ncomment,end_ncomment,comment_char:{
    foreground_color:"gray";
}

COLOR:label:{
    foreground_color:"green";
}

NAVIGATOR:Package:{
    display_name: "package $DotIdent$";
    isLeaf: "true";
}


NAVIGATOR:Import:{
    display_name: "import $StrLit$";
    isLeaf: "true";
}

NAVIGATOR:Option:{
    display_name: "option $OptionBody.DotIdent$ = $OptionBody.Constant";
    isLeaf: "true";
    icon: "/org/netbeans/modules/languages/resources/options.gif";
}

NAVIGATOR:Message:{
    display_name: "message $MessageName$";
    isLeaf: "false";
}

NAVIGATOR:Enum: {
    display_name: "enum $EnumName$";
    isLeaf: "false";
}


NAVIGATOR:Extend: {
    display_name: "extend $UserType$";
    isLeaf: "true";
}

#EnumField = AnyIdent "=" IntLit ";";
NAVIGATOR:EnumField:{
    display_name: "$AnyIdent$ = $IntLit$";
    isLeaf: "true";
    icon: "/org/netbeans/modules/languages/resources/variable.gif";
}

NAVIGATOR:Service:{
    display_name: "service $AnyIdent$";
}

#Rpc = "rpc" AnyIdent "(" ParamUserType ")" "returns" "(" ResUserType ")" ";";
NAVIGATOR:Rpc:{
    display_name: "$AnyIdent$(param:$ParamUserType$):$ResUserType$";
    isLeaf: "true";
}

NAVIGATOR:GroupCont:{
    display_name: "group $<camelIdent>$ = $IntLit$";
    isLeaf: "false";
}

#FieldCont = Type AnyIdent "=" IntLit [ "[" FieldOption ( "," FieldOption )* "]" ] ";";
NAVIGATOR:FieldCont:{
    display_name: "$AnyIdent$ ($IntLit$) : $Type$ ";
    icon: "/org/netbeans/modules/languages/resources/variable.gif";
    isLeaf: "true";
}

NAVIGATOR:Extensions:{
    display_name: "extensions";
    isLeaf: "false";
}

NAVIGATOR:Extension:{
    display_name: " $FromIntLit$ to $ToIntLit$";
    isLeaf: "true";
}


# brace completion
COMPLETE "{:}"
COMPLETE "(:)"
COMPLETE "[:]"

# indentation support
INDENT "{:}"
INDENT ".*\\{"

FOLD:MessageBody:{
    expand_type_action_name:"Expand Message";
    collapse_type_action_name:"Collapse Message";
}

FOLD:ServiceBody:{
    expand_type_action_name:"Expand Service";
    collapse_type_action_name:"Collapse Service";
}

FOLD:EnumBody:{
    expand_type_action_name:"Expand Enum";
    collapse_type_action_name:"Collapse Enum";
}

FOLD:comment_char:{
    expand_type_action_name:"Expand comment";
    collapse_type_action_name:"Collapse comment";
}

